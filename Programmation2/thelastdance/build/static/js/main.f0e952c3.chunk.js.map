{"version":3,"sources":["img/logo-netflix.jpg","img/michael-jordan.jpg","img/steve-kerr.jpg","img/bill-wennington.jpg","img/scottie-pippen.png","img/dennis-rodman.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","nbAleatoire","Math","floor","random","joueurs","photosJoueurs","photoSteve","photoMichael","photoBill","photoScottie","photoDennis","photoActive","nomJoueurAffiche","listeJoueurs","map","element","i","key","listeConditionnelle","className","src","logoNetflix","alt","id","onClick","document","getElementById","style","imgJoueur","nomJoueur","setAttribute","innerHTML","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,+PCuE5BC,MA9Df,WACE,IAAIC,EAAcC,KAAKC,MAAsB,EAAhBD,KAAKE,UAE5BC,EAAU,CAAC,aAAc,iBAAkB,kBAAmB,iBAAkB,iBAChFC,EAAgB,CAACC,IAAYC,IAAcC,IAAWC,IAAcC,KAEtEC,EAAcN,EAAcL,GAC5BY,EAAmBR,EAAQJ,GAczBa,EAAeT,EAAQU,KAAI,SAACC,EAAQC,GAAT,OAAe,wBAAIC,IAAK,UAAYD,GAAID,MAEnEG,EACJ,4BACmB,IAAhBlB,GAAqB,4BAAKI,EAAQ,IAClB,IAAhBJ,GAAqB,4BAAKI,EAAQ,IAClB,IAAhBJ,GAAqB,4BAAKI,EAAQ,IAClB,IAAhBJ,GAAqB,4BAAKI,EAAQ,IAClB,IAAhBJ,GAAqB,4BAAKI,EAAQ,KA4BvC,OAvBE,yBAAKe,UAAU,OACb,8CACA,gDACA,yBAAMA,UAAU,OACVC,IAAKC,IACLC,IAAI,iBAEV,iDACA,wBAAIC,GAAG,aAAaX,GACpB,yBACEW,GAAK,YACLJ,UAAY,YACZC,IAAKT,IAEP,sFACA,4BAAKE,GACL,yBAAKU,GAAG,gBACR,uGACGL,GAEH,4BAAQM,QA7CZ,WACcC,SAASC,eAAe,gBAC9BC,MAAN,QAAyB,OAEzB,IAAI3B,EAAcC,KAAKC,MAAsB,EAAhBD,KAAKE,UAC9ByB,EAAYH,SAASC,eAAe,aACpCG,EAAYJ,SAASC,eAAe,aAExCE,EAAUE,aAAa,MAAOzB,EAAcL,IAC5C6B,EAAUE,UAAY3B,EAAQJ,KAoC5B,yBCnDcgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFd,SAASC,eAAe,SDyHpB,kBAAmBc,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f0e952c3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-netflix.049591a9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/michael-jordan.7fd507f3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/steve-kerr.96c6fce5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bill-wennington.895ac839.jpg\";","module.exports = __webpack_public_path__ + \"static/media/scottie-pippen.db355978.png\";","module.exports = __webpack_public_path__ + \"static/media/dennis-rodman.64a7bf0b.jpg\";","import React from 'react';\nimport logoNetflix from './img/logo-netflix.jpg';\nimport photoMichael from './img/michael-jordan.jpg';\nimport photoSteve from './img/steve-kerr.jpg';\nimport photoBill from './img/bill-wennington.jpg';\nimport photoScottie from './img/scottie-pippen.png';\nimport photoDennis from './img/dennis-rodman.jpg';\nimport './App.css';\n\nfunction App() {\n  let nbAleatoire = Math.floor(Math.random() * 5);\n\n  const joueurs = ['Steve Keer', 'Michael Jordan', 'Bill Wennington', 'Scottie Pippen', 'Dennis Rodman'];\n  const photosJoueurs = [photoSteve, photoMichael, photoBill, photoScottie, photoDennis];\n\n  let photoActive = photosJoueurs[nbAleatoire];\n  let nomJoueurAffiche = joueurs[nbAleatoire];\n\n  function changerJoueur() {\n    let liste = document.getElementById(\"listeACacher\");\n    liste.style[\"display\"] = \"none\";\n    \n    let nbAleatoire = Math.floor(Math.random() * 5);\n    let imgJoueur = document.getElementById(\"imgJoueur\");\n    let nomJoueur = document.getElementById(\"nomJoueur\");\n\n    imgJoueur.setAttribute(\"src\", photosJoueurs[nbAleatoire]);\n    nomJoueur.innerHTML = joueurs[nbAleatoire];\n  }\n\n  const listeJoueurs = joueurs.map((element,i) => <li key={'element' + i}>{element}</li>);\n\n  const listeConditionnelle = (\n    <ul>\n      {nbAleatoire !== 0 && <li>{joueurs[0]}</li>}\n      {nbAleatoire !== 1 && <li>{joueurs[1]}</li>}\n      {nbAleatoire !== 2 && <li>{joueurs[2]}</li>}\n      {nbAleatoire !== 3 && <li>{joueurs[3]}</li>}\n      {nbAleatoire !== 4 && <li>{joueurs[4]}</li>}\n    </ul>\n  );\n\n  const texteAfficher = (\n    <div className=\"App\">\n      <h1>The last dance</h1>\n      <p>Une production de</p>\n      <img  className=\"logo\" \n            src={logoNetflix}\n            alt=\"logo netflix\"\n      />\n      <p>Mettant en vedette</p>\n      <h2 id=\"nomJoueur\">{nomJoueurAffiche}</h2>\n      <img\n        id = \"imgJoueur\"\n        className = \"imgJoueur\"\n        src={photoActive}\n      />\n      <p>Les 5 participants affichés avec la méthode map()</p>\n      <ul>{listeJoueurs}</ul>\n      <div id=\"listeACacher\">\n      <p>Les 4 participants non-choisis affichés grâce à la condition &&</p>\n        {listeConditionnelle}\n      </div>\n      <button onClick={changerJoueur}>Changer les joueurs</button>\n    </div>\n  );\n  return (\n    texteAfficher\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}